{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Hero","props","react_default","a","createElement","Fragment","hero","name","biography","fullName","placeOfBirth","alignment","work","occupation","base","App","_useState","useState","_useState2","Object","slicedToArray","setHero","similarity","s1","s2","longer","shorter","length","longerLength","toLowerCase","costs","Array","i","lastValue","j","newValue","charAt","Math","min","editDistance","parseFloat","searchHandle","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","resp","foundData","wrap","_context","prev","next","preventDefault","axios","get","sent","document","querySelector","value","data","map","elem","alert","stop","_x","apply","this","arguments","style","textAlign","onSubmit","id","type","App_Hero","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8ce6a9eb.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nimport './index.css';\n\nconst Hero = props => (\n  <>\n  <h3>Hero Name : {props.hero.name}</h3>\n  <h3>Real Name : {props.hero.biography.fullName}</h3>\n  <h3>Born in : {props.hero.biography.placeOfBirth}</h3>\n  <h3>Alignment : {props.hero.biography.alignment}</h3>\n  <h3>He works as a {props.hero.work.occupation} from {props.hero.work.base}</h3>\n  </>\n)\n\nfunction App() {\n\n  const [hero,setHero] = useState('');\n\n  function similarity(s1, s2) {\n    var longer = s1;\n    var shorter = s2;\n    if (s1.length < s2.length) {\n      longer = s2;\n      shorter = s1;\n    }\n    var longerLength = longer.length;\n    if (longerLength == 0) {\n      return 1.0;\n    }\n    return (longerLength - editDistance(longer, shorter)) / parseFloat(longerLength);\n  }\n\n  function editDistance(s1, s2) {\n    s1 = s1.toLowerCase();\n    s2 = s2.toLowerCase();\n\n    var costs = new Array();\n    for (var i = 0; i <= s1.length; i++) {\n      var lastValue = i;\n      for (var j = 0; j <= s2.length; j++) {\n        if (i == 0)\n          costs[j] = j;\n        else {\n          if (j > 0) {\n            var newValue = costs[j - 1];\n            if (s1.charAt(i - 1) != s2.charAt(j - 1))\n              newValue = Math.min(Math.min(newValue, lastValue),\n                costs[j]) + 1;\n            costs[j - 1] = lastValue;\n            lastValue = newValue;\n          }\n        }\n      }\n      if (i > 0)\n        costs[s2.length] = lastValue;\n    }\n    return costs[s2.length];\n  }\n\n  const searchHandle = async e => {\n    e.preventDefault();\n    const resp = await axios.get('https://akabab.github.io/superhero-api/api/all.json');\n    const hero = document.querySelector(\"#hero\").value;\n\n    let foundData;\n    resp.data.map( elem => {\n      if((similarity(hero,elem.name)>=.8 || similarity(hero,elem.biography.fullName)>=.8) && !foundData) {\n        foundData = elem;\n      }\n    });\n\n    foundData ? setHero(foundData) : alert('Hero Not Found');\n  }\n\n  return (\n    <div style={{textAlign: 'center'}}>\n      <h4>Type the real name or superhero name of a Hero !</h4>\n      <form onSubmit={e=>searchHandle(e)}>\n      <input id=\"hero\" type=\"text\" /> <button type=\"submit\">Search</button>\n      </form>\n      <br />\n      {hero ? \n        <Hero hero={hero} />\n        : 'Search for a hero above'}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}